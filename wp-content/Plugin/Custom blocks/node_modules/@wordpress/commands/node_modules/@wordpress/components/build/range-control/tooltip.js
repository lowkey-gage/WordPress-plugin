"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SimpleTooltip;
var _clsx = _interopRequireDefault(require("clsx"));
var _element = require("@wordpress/element");
var _rangeControlStyles = require("./styles/range-control-styles");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function SimpleTooltip(props) {
  const {
    className,
    inputRef,
    tooltipPlacement,
    show = false,
    style = {},
    value = 0,
    renderTooltipContent = v => v,
    zIndex = 100,
    ...restProps
  } = props;
  const placement = useTooltipPlacement({
    inputRef,
    tooltipPlacement
  });
  const classes = (0, _clsx.default)('components-simple-tooltip', className);
  const styles = {
    ...style,
    zIndex
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_rangeControlStyles.Tooltip, {
    ...restProps,
    "aria-hidden": "false",
    className: classes,
    placement: placement,
    show: show,
    role: "tooltip",
    style: styles,
    children: renderTooltipContent(value)
  });
}
function useTooltipPlacement({
  inputRef,
  tooltipPlacement
}) {
  const [placement, setPlacement] = (0, _element.useState)();
  const setTooltipPlacement = (0, _element.useCallback)(() => {
    if (inputRef && inputRef.current) {
      setPlacement(tooltipPlacement);
    }
  }, [tooltipPlacement, inputRef]);
  (0, _element.useEffect)(() => {
    setTooltipPlacement();
  }, [setTooltipPlacement]);
  (0, _element.useEffect)(() => {
    window.addEventListener('resize', setTooltipPlacement);
    return () => {
      window.removeEventListener('resize', setTooltipPlacement);
    };
  });
  return placement;
}
//# sourceMappingURL=tooltip.js.map