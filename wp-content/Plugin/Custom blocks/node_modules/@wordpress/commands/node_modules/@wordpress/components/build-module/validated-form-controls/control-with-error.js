/**
 * WordPress dependencies
 */
import { usePrevious } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
import { cloneElement, forwardRef, useEffect, useState } from '@wordpress/element';

/**
 * Internal dependencies
 */
import { withIgnoreIMEEvents } from '../utils/with-ignore-ime-events';
import { ValidityIndicator } from './validity-indicator';
import { Fragment as _Fragment, jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
function appendRequiredIndicator(label, required, markWhenOptional) {
  if (required && !markWhenOptional) {
    return /*#__PURE__*/_jsxs(_Fragment, {
      children: [label, " ", `(${__('Required')})`]
    });
  }
  if (!required && markWhenOptional) {
    return /*#__PURE__*/_jsxs(_Fragment, {
      children: [label, " ", `(${__('Optional')})`]
    });
  }
  return label;
}

/**
 * HTML elements that support the Constraint Validation API.
 *
 * Here, we exclude HTMLButtonElement because although it does technically support the API,
 * normal buttons are actually exempted from any validation.
 * @see https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Form_validation
 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/willValidate
 */

function UnforwardedControlWithError({
  required,
  markWhenOptional,
  onValidate,
  customValidity,
  getValidityTarget,
  children
}, forwardedRef) {
  const [errorMessage, setErrorMessage] = useState();
  const [statusMessage, setStatusMessage] = useState();
  const [isTouched, setIsTouched] = useState(false);
  const previousCustomValidityType = usePrevious(customValidity?.type);

  // Ensure that error messages are visible after user attemps to submit a form
  // with multiple invalid fields.
  useEffect(() => {
    const validityTarget = getValidityTarget();
    const showValidationMessage = () => setErrorMessage(validityTarget?.validationMessage);
    validityTarget?.addEventListener('invalid', showValidationMessage);
    return () => {
      validityTarget?.removeEventListener('invalid', showValidationMessage);
    };
  });
  useEffect(() => {
    if (!isTouched) {
      return;
    }
    const validityTarget = getValidityTarget();
    if (!customValidity?.type) {
      validityTarget?.setCustomValidity('');
      setErrorMessage(validityTarget?.validationMessage);
      setStatusMessage(undefined);
      return;
    }
    switch (customValidity.type) {
      case 'validating':
        {
          // Wait before showing a validating state.
          const timer = setTimeout(() => {
            validityTarget?.setCustomValidity('');
            setErrorMessage(undefined);
            setStatusMessage({
              type: 'validating',
              message: customValidity.message
            });
          }, 1000);
          return () => clearTimeout(timer);
        }
      case 'valid':
        {
          // Ensures that we wait for any async responses before showing
          // a synchronously valid state.
          if (previousCustomValidityType === 'valid') {
            break;
          }
          validityTarget?.setCustomValidity('');
          setErrorMessage(validityTarget?.validationMessage);
          setStatusMessage({
            type: 'valid',
            message: customValidity.message
          });
          break;
        }
      case 'invalid':
        {
          var _customValidity$messa;
          validityTarget?.setCustomValidity((_customValidity$messa = customValidity.message) !== null && _customValidity$messa !== void 0 ? _customValidity$messa : '');
          setErrorMessage(validityTarget?.validationMessage);
          setStatusMessage(undefined);
          break;
        }
    }
  }, [isTouched, customValidity?.type, customValidity?.message, getValidityTarget, previousCustomValidityType]);
  const onBlur = event => {
    if (isTouched) {
      return;
    }

    // Only consider "blurred from the component" if focus has fully left the wrapping div.
    // This prevents unnecessary blurs from components with multiple focusable elements.
    if (!event.relatedTarget || !event.currentTarget.contains(event.relatedTarget)) {
      setIsTouched(true);
      onValidate?.();
    }
  };
  const onChange = (...args) => {
    children.props.onChange?.(...args);

    // Only validate incrementally if the field has blurred at least once,
    // or currently has an error message.
    if (isTouched || errorMessage) {
      onValidate?.();
    }
  };
  const onKeyDown = event => {
    // Ensures that custom validators are triggered when the user submits by pressing Enter,
    // without ever blurring the control.
    if (event.key === 'Enter') {
      onValidate?.();
    }
  };
  return (
    /*#__PURE__*/
    // Disable reason: Just listening to a bubbled event, not for interaction.
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    _jsxs("div", {
      className: "components-validated-control",
      ref: forwardedRef,
      onBlur: onBlur,
      onKeyDown: withIgnoreIMEEvents(onKeyDown),
      children: [cloneElement(children, {
        label: appendRequiredIndicator(children.props.label, required, markWhenOptional),
        onChange,
        required
      }), /*#__PURE__*/_jsxs("div", {
        "aria-live": "polite",
        children: [errorMessage && /*#__PURE__*/_jsx(ValidityIndicator, {
          type: "invalid",
          message: errorMessage
        }), !errorMessage && statusMessage && /*#__PURE__*/_jsx(ValidityIndicator, {
          type: statusMessage.type,
          message: statusMessage.message
        })]
      })]
    })
  );
}
export const ControlWithError = forwardRef(UnforwardedControlWithError);
//# sourceMappingURL=control-with-error.js.map