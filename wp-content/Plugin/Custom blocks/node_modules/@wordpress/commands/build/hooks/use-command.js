"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCommand = useCommand;
exports.useCommands = useCommands;
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _store = require("../store");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Attach a command to the command palette. Used for static commands.
 *
 * @param {import('../store/actions').WPCommandConfig} command command config.
 *
 * @example
 * ```js
 * import { useCommand } from '@wordpress/commands';
 * import { plus } from '@wordpress/icons';
 *
 * useCommand( {
 *     name: 'myplugin/my-command-name',
 *     label: __( 'Add new post' ),
 *	   icon: plus,
 *     callback: ({ close }) => {
 *         document.location.href = 'post-new.php';
 *         close();
 *     },
 * } );
 * ```
 */
function useCommand(command) {
  const {
    registerCommand,
    unregisterCommand
  } = (0, _data.useDispatch)(_store.store);
  const currentCallbackRef = (0, _element.useRef)(command.callback);
  (0, _element.useEffect)(() => {
    currentCallbackRef.current = command.callback;
  }, [command.callback]);
  (0, _element.useEffect)(() => {
    if (command.disabled) {
      return;
    }
    registerCommand({
      name: command.name,
      context: command.context,
      label: command.label,
      searchLabel: command.searchLabel,
      icon: command.icon,
      keywords: command.keywords,
      callback: (...args) => currentCallbackRef.current(...args)
    });
    return () => {
      unregisterCommand(command.name);
    };
  }, [command.name, command.label, command.searchLabel, command.icon, command.context, command.keywords, command.disabled, registerCommand, unregisterCommand]);
}

/**
 * Attach multiple commands to the command palette. Used for static commands.
 *
 * @param {import('../store/actions').WPCommandConfig[]} commands Array of command configs.
 *
 * @example
 * ```js
 * import { useCommands } from '@wordpress/commands';
 * import { plus, edit } from '@wordpress/icons';
 *
 * useCommands( [
 *     {
 *         name: 'myplugin/add-post',
 *         label: __( 'Add new post' ),
 *         icon: plus,
 *         callback: ({ close }) => {
 *             document.location.href = 'post-new.php';
 *             close();
 *         },
 *     },
 *     {
 *         name: 'myplugin/edit-posts',
 *         label: __( 'Edit posts' ),
 *         icon: edit,
 *         callback: ({ close }) => {
 *             document.location.href = 'edit.php';
 *             close();
 *         },
 *     },
 * ] );
 * ```
 */
function useCommands(commands) {
  const {
    registerCommand,
    unregisterCommand
  } = (0, _data.useDispatch)(_store.store);
  const currentCallbacksRef = (0, _element.useRef)({});
  (0, _element.useEffect)(() => {
    if (!commands) {
      return;
    }
    commands.forEach(command => {
      if (command.callback) {
        currentCallbacksRef.current[command.name] = command.callback;
      }
    });
  }, [commands]);
  (0, _element.useEffect)(() => {
    if (!commands) {
      return;
    }
    commands.forEach(command => {
      if (command.disabled) {
        return;
      }
      registerCommand({
        name: command.name,
        context: command.context,
        label: command.label,
        searchLabel: command.searchLabel,
        icon: command.icon,
        keywords: command.keywords,
        callback: (...args) => {
          const callback = currentCallbacksRef.current[command.name];
          if (callback) {
            callback(...args);
          }
        }
      });
    });
    return () => {
      commands.forEach(command => {
        unregisterCommand(command.name);
      });
    };
  }, [commands, registerCommand, unregisterCommand]);
}
//# sourceMappingURL=use-command.js.map