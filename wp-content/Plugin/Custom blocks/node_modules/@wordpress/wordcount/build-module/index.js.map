{"version":3,"names":["defaultSettings","stripTags","transposeAstralsToCountableChar","stripHTMLEntities","stripConnectors","stripRemovables","stripHTMLComments","stripShortcodes","stripSpaces","transposeHTMLEntitiesToCountableChars","loadSettings","type","userSettings","_settings$l10n$shortc","mergedSettings","settings","shortcodes","l10n","length","shortcodesRegExp","RegExp","join","countWords","text","regex","_text$match$length","bind","reduce","result","fn","match","countCharacters","_text$match$length2","count","matchRegExp","wordsRegExp","characters_including_spacesRegExp","characters_excluding_spacesRegExp"],"sources":["@wordpress/wordcount/src/index.ts"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { defaultSettings } from './defaultSettings';\nimport stripTags from './stripTags';\nimport transposeAstralsToCountableChar from './transposeAstralsToCountableChar';\nimport stripHTMLEntities from './stripHTMLEntities';\nimport stripConnectors from './stripConnectors';\nimport stripRemovables from './stripRemovables';\nimport stripHTMLComments from './stripHTMLComments';\nimport stripShortcodes from './stripShortcodes';\nimport stripSpaces from './stripSpaces';\nimport transposeHTMLEntitiesToCountableChars from './transposeHTMLEntitiesToCountableChars';\n\nimport type { Settings, UserSettings, Strategy } from './types';\n\n/**\n * Private function to manage the settings.\n *\n * @param type         The type of count to be done.\n * @param userSettings Custom settings for the count.\n * @return The combined settings object to be used.\n */\nfunction loadSettings(\n\ttype: Strategy = 'words',\n\tuserSettings: UserSettings = {}\n): Settings {\n\tconst mergedSettings = { ...defaultSettings, ...userSettings };\n\n\tconst settings: Settings = {\n\t\t...mergedSettings,\n\t\ttype,\n\t\tshortcodes: [],\n\t};\n\n\tsettings.shortcodes = settings.l10n?.shortcodes ?? [];\n\n\tif ( settings.shortcodes && settings.shortcodes.length ) {\n\t\tsettings.shortcodesRegExp = new RegExp(\n\t\t\t'\\\\[\\\\/?(?:' + settings.shortcodes.join( '|' ) + ')[^\\\\]]*?\\\\]',\n\t\t\t'g'\n\t\t);\n\t}\n\n\tif (\n\t\tsettings.type !== 'characters_excluding_spaces' &&\n\t\tsettings.type !== 'characters_including_spaces'\n\t) {\n\t\tsettings.type = 'words';\n\t}\n\n\treturn settings;\n}\n\n/**\n * Count the words in text\n *\n * @param text     The text being processed\n * @param regex    The regular expression pattern being matched\n * @param settings Settings object containing regular expressions for each strip function\n * @return Count of words.\n */\nfunction countWords( text: string, regex: RegExp, settings: Settings ): number {\n\ttext = [\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\tstripHTMLEntities.bind( null, settings ),\n\t\tstripConnectors.bind( null, settings ),\n\t\tstripRemovables.bind( null, settings ),\n\t].reduce( ( result, fn ) => fn( result ), text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count the characters in text\n *\n * @param text     The text being processed\n * @param regex    The regular expression pattern being matched\n * @param settings Settings object containing regular expressions for each strip function\n * @return Count of characters.\n */\nfunction countCharacters(\n\ttext: string,\n\tregex: RegExp,\n\tsettings: Settings\n): number {\n\ttext = [\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\ttransposeAstralsToCountableChar.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\ttransposeHTMLEntitiesToCountableChars.bind( null, settings ),\n\t].reduce( ( result, fn ) => fn( result ), text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count some words.\n *\n * @param text         The text being processed\n * @param type         The type of count. Accepts 'words', 'characters_excluding_spaces', or 'characters_including_spaces'.\n * @param userSettings Custom settings object.\n *\n * @example\n * ```ts\n * import { count } from '@wordpress/wordcount';\n * const numberOfWords = count( 'Words to count', 'words', {} )\n * ```\n *\n * @return The word or character count.\n */\nexport function count(\n\ttext: string,\n\ttype: Strategy,\n\tuserSettings?: UserSettings\n): number {\n\tconst settings = loadSettings( type, userSettings );\n\tlet matchRegExp: RegExp;\n\tswitch ( settings.type ) {\n\t\tcase 'words':\n\t\t\tmatchRegExp = settings.wordsRegExp;\n\t\t\treturn countWords( text, matchRegExp, settings );\n\t\tcase 'characters_including_spaces':\n\t\t\tmatchRegExp = settings.characters_including_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tcase 'characters_excluding_spaces':\n\t\t\tmatchRegExp = settings.characters_excluding_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}\n\n// Export types for external usage\nexport * from './types';\n"],"mappings":"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","ignoreList":[]}