{"version":3,"names":["_defaultSettings","require","_stripTags","_interopRequireDefault","_transposeAstralsToCountableChar","_stripHTMLEntities","_stripConnectors","_stripRemovables","_stripHTMLComments","_stripShortcodes","_stripSpaces","_transposeHTMLEntitiesToCountableChars","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","loadSettings","type","userSettings","_settings$l10n$shortc","mergedSettings","defaultSettings","settings","shortcodes","l10n","length","shortcodesRegExp","RegExp","join","countWords","text","regex","_text$match$length","stripTags","bind","stripHTMLComments","stripShortcodes","stripSpaces","stripHTMLEntities","stripConnectors","stripRemovables","reduce","result","fn","match","countCharacters","_text$match$length2","transposeAstralsToCountableChar","transposeHTMLEntitiesToCountableChars","count","matchRegExp","wordsRegExp","characters_including_spacesRegExp","characters_excluding_spacesRegExp"],"sources":["@wordpress/wordcount/src/index.ts"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { defaultSettings } from './defaultSettings';\nimport stripTags from './stripTags';\nimport transposeAstralsToCountableChar from './transposeAstralsToCountableChar';\nimport stripHTMLEntities from './stripHTMLEntities';\nimport stripConnectors from './stripConnectors';\nimport stripRemovables from './stripRemovables';\nimport stripHTMLComments from './stripHTMLComments';\nimport stripShortcodes from './stripShortcodes';\nimport stripSpaces from './stripSpaces';\nimport transposeHTMLEntitiesToCountableChars from './transposeHTMLEntitiesToCountableChars';\n\nimport type { Settings, UserSettings, Strategy } from './types';\n\n/**\n * Private function to manage the settings.\n *\n * @param type         The type of count to be done.\n * @param userSettings Custom settings for the count.\n * @return The combined settings object to be used.\n */\nfunction loadSettings(\n\ttype: Strategy = 'words',\n\tuserSettings: UserSettings = {}\n): Settings {\n\tconst mergedSettings = { ...defaultSettings, ...userSettings };\n\n\tconst settings: Settings = {\n\t\t...mergedSettings,\n\t\ttype,\n\t\tshortcodes: [],\n\t};\n\n\tsettings.shortcodes = settings.l10n?.shortcodes ?? [];\n\n\tif ( settings.shortcodes && settings.shortcodes.length ) {\n\t\tsettings.shortcodesRegExp = new RegExp(\n\t\t\t'\\\\[\\\\/?(?:' + settings.shortcodes.join( '|' ) + ')[^\\\\]]*?\\\\]',\n\t\t\t'g'\n\t\t);\n\t}\n\n\tif (\n\t\tsettings.type !== 'characters_excluding_spaces' &&\n\t\tsettings.type !== 'characters_including_spaces'\n\t) {\n\t\tsettings.type = 'words';\n\t}\n\n\treturn settings;\n}\n\n/**\n * Count the words in text\n *\n * @param text     The text being processed\n * @param regex    The regular expression pattern being matched\n * @param settings Settings object containing regular expressions for each strip function\n * @return Count of words.\n */\nfunction countWords( text: string, regex: RegExp, settings: Settings ): number {\n\ttext = [\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\tstripHTMLEntities.bind( null, settings ),\n\t\tstripConnectors.bind( null, settings ),\n\t\tstripRemovables.bind( null, settings ),\n\t].reduce( ( result, fn ) => fn( result ), text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count the characters in text\n *\n * @param text     The text being processed\n * @param regex    The regular expression pattern being matched\n * @param settings Settings object containing regular expressions for each strip function\n * @return Count of characters.\n */\nfunction countCharacters(\n\ttext: string,\n\tregex: RegExp,\n\tsettings: Settings\n): number {\n\ttext = [\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\ttransposeAstralsToCountableChar.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\ttransposeHTMLEntitiesToCountableChars.bind( null, settings ),\n\t].reduce( ( result, fn ) => fn( result ), text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count some words.\n *\n * @param text         The text being processed\n * @param type         The type of count. Accepts 'words', 'characters_excluding_spaces', or 'characters_including_spaces'.\n * @param userSettings Custom settings object.\n *\n * @example\n * ```ts\n * import { count } from '@wordpress/wordcount';\n * const numberOfWords = count( 'Words to count', 'words', {} )\n * ```\n *\n * @return The word or character count.\n */\nexport function count(\n\ttext: string,\n\ttype: Strategy,\n\tuserSettings?: UserSettings\n): number {\n\tconst settings = loadSettings( type, userSettings );\n\tlet matchRegExp: RegExp;\n\tswitch ( settings.type ) {\n\t\tcase 'words':\n\t\t\tmatchRegExp = settings.wordsRegExp;\n\t\t\treturn countWords( text, matchRegExp, settings );\n\t\tcase 'characters_including_spaces':\n\t\t\tmatchRegExp = settings.characters_including_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tcase 'characters_excluding_spaces':\n\t\t\tmatchRegExp = settings.characters_excluding_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}\n\n// Export types for external usage\nexport * from './types';\n"],"mappings":"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","ignoreList":[]}