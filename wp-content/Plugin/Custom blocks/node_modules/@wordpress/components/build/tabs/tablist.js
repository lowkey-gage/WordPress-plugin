"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabList = void 0;
var _react = _interopRequireWildcard(require("@ariakit/react"));
var Ariakit = _react;
var _warning = _interopRequireDefault(require("@wordpress/warning"));
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _context = require("./context");
var _styles = require("./styles");
var _clsx = _interopRequireDefault(require("clsx"));
var _elementRect = require("../utils/element-rect");
var _useOnValueUpdate = require("../utils/hooks/use-on-value-update");
var _useTrackOverflow = require("./use-track-overflow");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const SCROLL_MARGIN = 24;
const TabList = exports.TabList = (0, _element.forwardRef)(function TabList({
  children,
  ...otherProps
}, ref) {
  var _useTabsContext;
  const {
    store
  } = (_useTabsContext = (0, _context.useTabsContext)()) !== null && _useTabsContext !== void 0 ? _useTabsContext : {};
  const selectedId = (0, _react.useStoreState)(store, 'selectedId');
  const activeId = (0, _react.useStoreState)(store, 'activeId');
  const selectOnMove = (0, _react.useStoreState)(store, 'selectOnMove');
  const items = (0, _react.useStoreState)(store, 'items');
  const [parent, setParent] = (0, _element.useState)();
  const refs = (0, _compose.useMergeRefs)([ref, setParent]);
  const overflow = (0, _useTrackOverflow.useTrackOverflow)(parent, {
    first: items?.at(0)?.element,
    last: items?.at(-1)?.element
  });
  const selectedTabPosition = (0, _elementRect.useTrackElementOffsetRect)(store?.item(selectedId)?.element);
  const [animationEnabled, setAnimationEnabled] = (0, _element.useState)(false);
  (0, _useOnValueUpdate.useOnValueUpdate)(selectedId, ({
    previousValue
  }) => {
    if (previousValue) {
      setAnimationEnabled(true);
    }
  });

  // Make sure selected tab is scrolled into view.
  (0, _element.useLayoutEffect)(() => {
    if (!parent || !selectedTabPosition) {
      return;
    }
    const {
      scrollLeft: parentScroll
    } = parent;
    const parentWidth = parent.getBoundingClientRect().width;
    const {
      left: childLeft,
      width: childWidth
    } = selectedTabPosition;
    const parentRightEdge = parentScroll + parentWidth;
    const childRightEdge = childLeft + childWidth;
    const rightOverflow = childRightEdge + SCROLL_MARGIN - parentRightEdge;
    const leftOverflow = parentScroll - (childLeft - SCROLL_MARGIN);
    if (leftOverflow > 0) {
      parent.scrollLeft = parentScroll - leftOverflow;
    } else if (rightOverflow > 0) {
      parent.scrollLeft = parentScroll + rightOverflow;
    }
  }, [parent, selectedTabPosition]);
  const onBlur = () => {
    if (!selectOnMove) {
      return;
    }

    // When automatic tab selection is on, make sure that the active tab is up
    // to date with the selected tab when leaving the tablist. This makes sure
    // that the selected tab will receive keyboard focus when tabbing back into
    // the tablist.
    if (selectedId !== activeId) {
      store?.setActiveId(selectedId);
    }
  };
  if (!store) {
    globalThis.SCRIPT_DEBUG === true ? (0, _warning.default)('`Tabs.TabList` must be wrapped in a `Tabs` component.') : void 0;
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Ariakit.TabList, {
    ref: refs,
    store: store,
    render: /*#__PURE__*/(0, _jsxRuntime.jsx)(_styles.TabListWrapper, {
      onTransitionEnd: event => {
        if (event.pseudoElement === '::before') {
          setAnimationEnabled(false);
        }
      }
    }),
    onBlur: onBlur,
    tabIndex: -1,
    ...otherProps,
    style: {
      '--indicator-top': selectedTabPosition.top,
      '--indicator-right': selectedTabPosition.right,
      '--indicator-left': selectedTabPosition.left,
      '--indicator-width': selectedTabPosition.width,
      '--indicator-height': selectedTabPosition.height,
      ...otherProps.style
    },
    className: (0, _clsx.default)(overflow.first && 'is-overflowing-first', overflow.last && 'is-overflowing-last', animationEnabled && 'is-animation-enabled', otherProps.className),
    children: children
  });
});
//# sourceMappingURL=tablist.js.map