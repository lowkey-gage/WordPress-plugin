"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubmenuChevronIcon = exports.MenuPopoverOuterWrapper = exports.MenuPopoverInnerWrapper = exports.ItemSuffixWrapper = exports.ItemPrefixWrapper = exports.DropdownMenuSeparator = exports.DropdownMenuRadioItem = exports.DropdownMenuItemLabel = exports.DropdownMenuItemHelpText = exports.DropdownMenuItemContentWrapper = exports.DropdownMenuItemChildrenWrapper = exports.DropdownMenuItem = exports.DropdownMenuGroupLabel = exports.DropdownMenuGroup = exports.DropdownMenuCheckboxItem = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _react2 = require("@emotion/react");
var _utils = require("../utils");
var _space = require("../utils/space");
var _icon = _interopRequireDefault(require("../icon"));
var _truncate = require("../truncate");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /**
 * External dependencies
 */ /**
 * Internal dependencies
 */
const ANIMATION_PARAMS = {
  SCALE_AMOUNT_OUTER: 0.82,
  SCALE_AMOUNT_CONTENT: 0.9,
  DURATION: {
    IN: '400ms',
    OUT: '200ms'
  },
  EASING: 'cubic-bezier(0.33, 0, 0, 1)'
};
const CONTENT_WRAPPER_PADDING = (0, _space.space)(1);
const ITEM_PADDING_BLOCK = (0, _space.space)(2);
const ITEM_PADDING_INLINE = (0, _space.space)(3);

// TODO:
// - border color and divider color are different from COLORS.theme variables
// - lighter text color is not defined in COLORS.theme, should it be?
// - lighter background color is not defined in COLORS.theme, should it be?
const DEFAULT_BORDER_COLOR = _utils.COLORS.theme.gray[300];
const DIVIDER_COLOR = _utils.COLORS.theme.gray[200];
const LIGHTER_TEXT_COLOR = _utils.COLORS.theme.gray[700];
const LIGHT_BACKGROUND_COLOR = _utils.COLORS.theme.gray[100];
const TOOLBAR_VARIANT_BORDER_COLOR = _utils.COLORS.theme.foreground;
const DEFAULT_BOX_SHADOW = `0 0 0 ${_utils.CONFIG.borderWidth} ${DEFAULT_BORDER_COLOR}, ${_utils.CONFIG.elevationMedium}`;
const TOOLBAR_VARIANT_BOX_SHADOW = `0 0 0 ${_utils.CONFIG.borderWidth} ${TOOLBAR_VARIANT_BORDER_COLOR}`;
const GRID_TEMPLATE_COLS = 'minmax( 0, max-content ) 1fr';
const MenuPopoverOuterWrapper = exports.MenuPopoverOuterWrapper = /*#__PURE__*/(0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf14"
} : {
  target: "e1kdzosf14",
  label: "MenuPopoverOuterWrapper"
})("position:relative;background-color:", _utils.COLORS.ui.background, ";border-radius:", _utils.CONFIG.radiusMedium, ";", props => /*#__PURE__*/(0, _react2.css)("box-shadow:", props.variant === 'toolbar' ? TOOLBAR_VARIANT_BOX_SHADOW : DEFAULT_BOX_SHADOW, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuPopoverOuterWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " overflow:hidden;@media not ( prefers-reduced-motion ){transition-property:transform,opacity;transition-timing-function:", ANIMATION_PARAMS.EASING, ";transition-duration:", ANIMATION_PARAMS.DURATION.IN, ";will-change:transform,opacity;opacity:0;&:has( [data-enter] ){opacity:1;}&:has( [data-leave] ){transition-duration:", ANIMATION_PARAMS.DURATION.OUT, ";}&:has( [data-side='bottom'] ),&:has( [data-side='top'] ){transform:scaleY( ", ANIMATION_PARAMS.SCALE_AMOUNT_OUTER, " );}&:has( [data-side='bottom'] ){transform-origin:top;}&:has( [data-side='top'] ){transform-origin:bottom;}&:has( [data-enter][data-side='bottom'] ),&:has( [data-enter][data-side='top'] ),&:has( [data-leave][data-side='bottom'] ),&:has( [data-leave][data-side='top'] ){transform:scaleY( 1 );}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const MenuPopoverInnerWrapper = exports.MenuPopoverInnerWrapper = /*#__PURE__*/(0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf13"
} : {
  target: "e1kdzosf13",
  label: "MenuPopoverInnerWrapper"
})("position:relative;z-index:1000000;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";grid-template-rows:auto;box-sizing:border-box;min-width:160px;max-width:320px;max-height:var( --popover-available-height );padding:", CONTENT_WRAPPER_PADDING, ";overscroll-behavior:contain;overflow:auto;outline:2px solid transparent!important;@media not ( prefers-reduced-motion ){transition:inherit;transform-origin:inherit;&[data-side='bottom'],&[data-side='top']{transform:scaleY(\n\t\t\t\tcalc(\n\t\t\t\t\t1 / ", ANIMATION_PARAMS.SCALE_AMOUNT_OUTER, " *\n\t\t\t\t\t\t", ANIMATION_PARAMS.SCALE_AMOUNT_CONTENT, "\n\t\t\t\t)\n\t\t\t);}&[data-enter][data-side='bottom'],&[data-enter][data-side='top'],&[data-leave][data-side='bottom'],&[data-leave][data-side='top']{transform:scaleY( 1 );}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const baseItem = /*#__PURE__*/(0, _react2.css)("all:unset;position:relative;min-height:", (0, _space.space)(10), ";box-sizing:border-box;grid-column:1/-1;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";align-items:center;@supports ( grid-template-columns: subgrid ){grid-template-columns:subgrid;}font-size:", (0, _utils.font)('default.fontSize'), ";font-family:inherit;font-weight:normal;line-height:20px;color:", _utils.COLORS.theme.foreground, ";border-radius:", _utils.CONFIG.radiusSmall, ";padding-block:", ITEM_PADDING_BLOCK, ";padding-inline:", ITEM_PADDING_INLINE, ";scroll-margin:", CONTENT_WRAPPER_PADDING, ";user-select:none;outline:none;&[aria-disabled='true']{color:", _utils.COLORS.ui.textDisabled, ";cursor:not-allowed;}&[data-active-item]:not( [data-focus-visible] ):not(\n\t\t\t[aria-disabled='true']\n\t\t){background-color:", _utils.COLORS.theme.accent, ";color:", _utils.COLORS.white, ";}&[data-focus-visible]{box-shadow:0 0 0 1.5px ", _utils.COLORS.theme.accent, ";outline:2px solid transparent;}&:active,&[data-active]{}", MenuPopoverInnerWrapper, ":not(:focus) &:not(:focus)[aria-expanded=\"true\"]{background-color:", LIGHT_BACKGROUND_COLOR, ";color:", _utils.COLORS.theme.foreground, ";}svg{fill:currentColor;}" + (process.env.NODE_ENV === "production" ? "" : ";label:baseItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const DropdownMenuItem = exports.DropdownMenuItem = /*#__PURE__*/(0, _base.default)(Ariakit.MenuItem, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf12"
} : {
  target: "e1kdzosf12",
  label: "DropdownMenuItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuCheckboxItem = exports.DropdownMenuCheckboxItem = /*#__PURE__*/(0, _base.default)(Ariakit.MenuItemCheckbox, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf11"
} : {
  target: "e1kdzosf11",
  label: "DropdownMenuCheckboxItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuRadioItem = exports.DropdownMenuRadioItem = /*#__PURE__*/(0, _base.default)(Ariakit.MenuItemRadio, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf10"
} : {
  target: "e1kdzosf10",
  label: "DropdownMenuRadioItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemPrefixWrapper = exports.ItemPrefixWrapper = /*#__PURE__*/(0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf9"
} : {
  target: "e1kdzosf9",
  label: "ItemPrefixWrapper"
})("grid-column:1;", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&{min-width:", (0, _space.space)(6), ";}", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&,&:not( :empty ){margin-inline-end:", (0, _space.space)(2), ";}display:flex;align-items:center;justify-content:center;color:", LIGHTER_TEXT_COLOR, ";[data-active-item]:not( [data-focus-visible] )>&,[aria-disabled='true']>&{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuItemContentWrapper = exports.DropdownMenuItemContentWrapper = /*#__PURE__*/(0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf8"
} : {
  target: "e1kdzosf8",
  label: "DropdownMenuItemContentWrapper"
})("grid-column:2;display:flex;align-items:center;justify-content:space-between;gap:", (0, _space.space)(3), ";pointer-events:none;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuItemChildrenWrapper = exports.DropdownMenuItemChildrenWrapper = /*#__PURE__*/(0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf7"
} : {
  target: "e1kdzosf7",
  label: "DropdownMenuItemChildrenWrapper"
})("flex:1;display:inline-flex;flex-direction:column;gap:", (0, _space.space)(1), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemSuffixWrapper = exports.ItemSuffixWrapper = /*#__PURE__*/(0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf6"
} : {
  target: "e1kdzosf6",
  label: "ItemSuffixWrapper"
})("flex:0 1 fit-content;min-width:0;width:fit-content;display:flex;align-items:center;justify-content:center;gap:", (0, _space.space)(3), ";color:", LIGHTER_TEXT_COLOR, ";[data-active-item]:not( [data-focus-visible] ) *:not(", MenuPopoverInnerWrapper, ") &,[aria-disabled='true'] *:not(", MenuPopoverInnerWrapper, ") &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuGroup = exports.DropdownMenuGroup = /*#__PURE__*/(0, _base.default)(Ariakit.MenuGroup, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf5"
} : {
  target: "e1kdzosf5",
  label: "DropdownMenuGroup"
})(process.env.NODE_ENV === "production" ? {
  name: "49aokf",
  styles: "display:contents"
} : {
  name: "49aokf",
  styles: "display:contents",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const DropdownMenuGroupLabel = exports.DropdownMenuGroupLabel = /*#__PURE__*/(0, _base.default)(Ariakit.MenuGroupLabel, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf4"
} : {
  target: "e1kdzosf4",
  label: "DropdownMenuGroupLabel"
})("grid-column:1/-1;padding-block-start:", (0, _space.space)(3), ";padding-block-end:", (0, _space.space)(2), ";padding-inline:", ITEM_PADDING_INLINE, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuSeparator = exports.DropdownMenuSeparator = /*#__PURE__*/(0, _base.default)(Ariakit.MenuSeparator, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf3"
} : {
  target: "e1kdzosf3",
  label: "DropdownMenuSeparator"
})("grid-column:1/-1;border:none;height:", _utils.CONFIG.borderWidth, ";background-color:", props => props.variant === 'toolbar' ? TOOLBAR_VARIANT_BORDER_COLOR : DIVIDER_COLOR, ";margin-block:", (0, _space.space)(2), ";margin-inline:", ITEM_PADDING_INLINE, ";outline:2px solid transparent;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SubmenuChevronIcon = exports.SubmenuChevronIcon = /*#__PURE__*/(0, _base.default)(_icon.default, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf2"
} : {
  target: "e1kdzosf2",
  label: "SubmenuChevronIcon"
})("width:", (0, _space.space)(1.5), ";", (0, _utils.rtl)({
  transform: `scaleX(1)`
}, {
  transform: `scaleX(-1)`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuItemLabel = exports.DropdownMenuItemLabel = /*#__PURE__*/(0, _base.default)(_truncate.Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf1"
} : {
  target: "e1kdzosf1",
  label: "DropdownMenuItemLabel"
})("font-size:", (0, _utils.font)('default.fontSize'), ";line-height:20px;color:inherit;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DropdownMenuItemHelpText = exports.DropdownMenuItemHelpText = /*#__PURE__*/(0, _base.default)(_truncate.Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf0"
} : {
  target: "e1kdzosf0",
  label: "DropdownMenuItemHelpText"
})("font-size:", (0, _utils.font)('helpText.fontSize'), ";line-height:16px;color:", LIGHTER_TEXT_COLOR, ";word-break:break-all;[data-active-item]:not( [data-focus-visible] ) *:not( ", MenuPopoverInnerWrapper, " ) &,[aria-disabled='true'] *:not( ", MenuPopoverInnerWrapper, " ) &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=styles.js.map