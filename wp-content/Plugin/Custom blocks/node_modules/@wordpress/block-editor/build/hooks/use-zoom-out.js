"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useZoomOut = useZoomOut;
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _store = require("../store");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * A hook used to set the zoomed out view, invoking the hook sets the mode.
 *
 * @param {boolean} zoomOut If we should zoom out or not.
 */
function useZoomOut(zoomOut = true) {
  const {
    setZoomLevel
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_store.store));
  const {
    isZoomOut
  } = (0, _lockUnlock.unlock)((0, _data.useSelect)(_store.store));
  const originalIsZoomOutRef = (0, _element.useRef)(null);
  (0, _element.useEffect)(() => {
    // Only set this on mount so we know what to return to when we unmount.
    if (!originalIsZoomOutRef.current) {
      originalIsZoomOutRef.current = isZoomOut();
    }

    // The effect opens the zoom-out view if we want it open and the canvas is not currently zoomed-out.
    if (zoomOut && isZoomOut() === false) {
      setZoomLevel(50);
    } else if (!zoomOut && isZoomOut() && originalIsZoomOutRef.current !== isZoomOut()) {
      setZoomLevel(originalIsZoomOutRef.current ? 50 : 100);
    }
    return () => {
      if (isZoomOut() && isZoomOut() !== originalIsZoomOutRef.current) {
        setZoomLevel(originalIsZoomOutRef.current ? 50 : 100);
      }
    };
  }, [isZoomOut, setZoomLevel, zoomOut]);
}
//# sourceMappingURL=use-zoom-out.js.map