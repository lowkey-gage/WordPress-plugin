"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useZoomOutModeExit = useZoomOutModeExit;
var _data = require("@wordpress/data");
var _compose = require("@wordpress/compose");
var _store = require("../../../store");
var _lockUnlock = require("../../../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Allows Zoom Out mode to be exited by double clicking in the selected block.
 */
function useZoomOutModeExit() {
  const {
    getSettings,
    isZoomOut,
    __unstableGetEditorMode
  } = (0, _lockUnlock.unlock)((0, _data.useSelect)(_store.store));
  const {
    __unstableSetEditorMode,
    resetZoomLevel
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_store.store));
  return (0, _compose.useRefEffect)(node => {
    function onDoubleClick(event) {
      // In "compose" mode.
      const composeMode = __unstableGetEditorMode() === 'zoom-out' && isZoomOut();
      if (!composeMode) {
        return;
      }
      if (!event.defaultPrevented) {
        event.preventDefault();
        const {
          __experimentalSetIsInserterOpened
        } = getSettings();
        if (typeof __experimentalSetIsInserterOpened === 'function') {
          __experimentalSetIsInserterOpened(false);
        }
        __unstableSetEditorMode('edit');
        resetZoomLevel();
      }
    }
    node.addEventListener('dblclick', onDoubleClick);
    return () => {
      node.removeEventListener('dblclick', onDoubleClick);
    };
  }, [getSettings, __unstableSetEditorMode, __unstableGetEditorMode, isZoomOut, resetZoomLevel]);
}
//# sourceMappingURL=use-zoom-out-mode-exit.js.map